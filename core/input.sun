
// I got bored and ported input to sunscript to see if it worked

require("libs.json")

// This will be checked when keyBindings are loaded in from config.JSON.
keyBoardLayout = "qwerty"

IN_KEYS = {
    "attack" : 1 << 1;
    "jump"   : 1 << 2;
    "left"   : 1 << 3;
    "right"  : 1 << 4;
    "crouch" : 1 << 5;
    ":|"     : 1 << 6;
    ":/"     : 1 << 7;
    "select" : 1 << 8;
    "start"  : 1 << 9;
}

class Input {
    constructor() {
        self.binds = {}
        self.keyCodes = 0
        self._keyCodes = 0
        self.lastKeyCodes = 0
    }

    loadKeyBindings() {

        // run love . dvorak for dvorak bindings
        bindings_JSON = love.filesystem.read("config.json")
        bindings_o    = json.decode(bindings_JSON)
        
        if (keyBoardLayout == "dvorak") {
            // bind all the dvorak keys for player 1.
            for (key, action : bindings_o.player1.dvorak) {
                input:bind(key, action)
            }
            // bind all the dvorak keys for player 2.
            for (key, action : bindings_o.player2.dvorak) {
                input2:bind(key, action)
            }
        } else {
            // bind all the qwerty keys for player 1.
            for (key, action : bindings_o.player1.qwerty) {
                input:bind(key, action)
            }
            // bind all the qwerty keys for player 2.
            for (key, action : bindings_o.player2.qwerty) {
                input2:bind(key, action)
            }
        }
        // bind all the joystick buttons for player 1.
        for (key, action : bindings_o.player1.joystick) {
            input:bind(key, action)
        }
        // bind all the joystick buttons for player 2.
        for (key, action : bindings_o.player2.joystick) {
            input2:bind(key, action)
        }

    }

    // usage: input:isKeyDown("attack") == true
    isKeyDown(in_key) {
        local key_enum = IN_KEYS[in_key]
        if (key_enum == nil) { return }
        return (self.keyCodes & key_enum) != 0
    }

    // Only true for the first frame key is down. Use for jumping, etc.
    wasKeyPressed(in_key) {
        local key_enum = IN_KEYS[in_key]
        if (key_enum == nil) { return }

        return  ((self._keyCodes & key_enum) ~= 0) &&
                ((self.lastKeyCodes & key_enum) == 0)
    }

    update() {
        self.lastKeyCodes = self._keyCodes
        self._keyCodes = self.keyCodes
    }

    bind(key, in_key) {
        self.binds[key] = in_key
    }

    keyPress(in_key) {
        if (IN_KEYS[in_key] == nil) { return }
        local key_enum = IN_KEYS[in_key]

        if (self.keyCodes & key_enum) == 0 {
            self.keyCodes = self.keyCodes + key_enum
        }
    }

    keyRelease(in_key) {
        if (IN_KEYS[in_key] == nil) { return }
        local key_enum = IN_KEYS[in_key]

        if (self.keyCodes & key_enum) ~= 0 {
            self.lastKeyCodes = self.keyCodes
            self.keyCodes = self.keyCodes - key_enum
        }
    }

    eventKeyPressed(key) {
        local in_key = self.binds[key]

        // this isn't bound to anything valid. exit
        if (in_key == nil) { return }

        self:keyPress(in_key)
    }

    eventKeyReleased(key) {
        local in_key = self.binds[key]

        // this isn't bound to anything valid. exit
        if (in_key == nil) { return }

        self:keyRelease(in_key)
    }

    eventJoyPressed(key) {
        local in_key = self.binds["joy_" .. key]

        if (in_key == nil) { return }

        self:keyPress(in_key)
    }

    eventJoyReleased(key) {
        local in_key = self.binds["joy_" .. key]

        if (in_key == nil) { return }

        self:keyRelease(in_key)
    }

}


function love.keypressed(key, isrepeat) {
    if (key == "escape") {
        love.event.quit()
    }

    if (!isrepeat) {
        input:eventKeyPressed(key)
        input2:eventKeyPressed(key)
    }
}

function love.keyreleased(key) {
    input:eventKeyReleased(key)
    input2:eventKeyReleased(key)
}

function love.joystickpressed( joystick, button ) {
    input:eventJoyPressed(joystick:getID() .. "_" .. button)
    input2:eventJoyPressed(joystick:getID() .. "_" .. button)
}

function love.joystickreleased( joystick, button ) {
    input:eventJoyReleased(joystick:getID() .. "_" .. button)
    input2:eventJoyReleased(joystick:getID() .. "_" .. button)
}

lastAxes = {}

function joystickUpdate(dt) {
    local joysticks = love.joystick.getJoysticks()

    for (_, joystick : joysticks) {
        for (local i = 1; i < joystick:getAxisCount(); i++) {
            local axis = joystick:getAxis(i)
            local lastAxis = lastAxes[joystick:getID() .. "_" .. i] or 0
            if (axis > 0) and (lastAxis <= 0) {
                input:eventJoyPressed(joystick:getID() .. "_axisup_" .. i)
                input:eventJoyReleased(joystick:getID() .. "_axisdown_" .. i)
                input2:eventJoyPressed(joystick:getID() .. "_axisup_" .. i)
                input2:eventJoyReleased(joystick:getID() .. "_axisdown_" .. i)
            } else if (axis < 0) && (lastAxis >= 0) {
                input:eventJoyPressed(joystick:getID() .. "_axisdown_" .. i)
                input:eventJoyReleased(joystick:getID() .. "_axisup_" .. i)
                input2:eventJoyPressed(joystick:getID() .. "_axisdown_" .. i)
                input2:eventJoyReleased(joystick:getID() .. "_axisup_" .. i)
            } else if (axis == 0) && (lastAxis ~= 0) {
                input:eventJoyReleased(joystick:getID() .. "_axisdown_" .. i)
                input:eventJoyReleased(joystick:getID() .. "_axisup_" .. i)
                input2:eventJoyReleased(joystick:getID() .. "_axisdown_" .. i)
                input2:eventJoyReleased(joystick:getID() .. "_axisup_" .. i)
            }
            lastAxes[joystick:getID() .. "_" .. i] = axis
        }
    }
}

return Input
